@model CAPSTONE_TEAM01_2024.ViewModels.EmailViewModel

@{
ViewData["Title"] = "Sent Email";
//Layout = "_PersonnelLayout";
    int number = (Model.Emails.PageIndex - 1) * Model.Emails.PageSize;
}

<div class="content-wrapper" style="min-height: 912.2px;">
    <header class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h3 class="m-0">Gửi Mail</h3>
                </div>
            </div>
        </div>
    </header>

    <main class="content">
        <div class="container-fluid">
            <div class="card">
                <div class="card-header">
                    <div class="row text-center">
                        <div class="col-auto">
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addMailModal">
                                <i class="bi bi-plus"></i> Thêm Mail
                            </button>
                        </div>
                        <div class="col">
                            <nav class="navbar navbar-light bg-light">
                                <form class="d-flex ms-auto" method="get" action="@Url.Action("SentEmail", "Email")">
                                    <input class="form-control me-2" type="search" name="search" placeholder="Nhập nội dung tìm kiếm" aria-label="Search">
                                </form>
                            </nav>
                        </div>
                    </div>

                   
                </div>

                <div class="card-body">
                    @if (TempData["Success"] != null)
                    {
                    <div class="alert alert-success">@TempData["Success"]</div>
                    }
                    @if (TempData["Error"] != null)
                    {
                    <div class="alert alert-danger">@TempData["Error"]</div>
                    }
                    @if (TempData["Warning"] != null)
                    {
                    <div class="alert alert-danger">@TempData["Warning"]</div>
                    }
                    <table class="table table-bordered" id="data-table">
                        <thead>
                        <tr class="text-center">
                            <th>Người Gửi</th>
                            <th>Người Nhận</th>
                            <th>Tiêu Đề</th>
                            <th>Ngày Gửi</th>
                            <th>Trạng Thái</th>
                            <th>Thao Tác</th>
                        </tr>
                        </thead>        
                        <tbody id="data-table">
                            @foreach (var email in Model.Emails)
                            {
                                <tr class="text-center">
                                    <td>@email.Sender</td>
                                    <td> @string.Join(", ", email.Recipients.Select(r => r.User.Email))</td>
                                    <td>@email.Subject</td>
                                    <td>@email.SentDate.ToString("yyyy-MM-dd")</td>
                                    <td>@email.Status</td>
                                    <td class="text-center">
                                        <!-- Nút Xem Chi Tiết -->
                                        <button type="button" class="btn btn-outline-info btn-sm btn-view-email"
                                                data-bs-toggle="modal" data-bs-target="#DetailMailModal"
                                                data-email-id="@email.EmailId">
                                            <i class="fa-solid fa-eye custom-icon"></i>
                                        </button>

                                        <!-- Nút Xóa -->
                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                                data-bs-toggle="modal" data-bs-target="#DeleteMailModal"
                                                data-email-id="@email.EmailId" onclick="openDeleteModal(this)">
                                            <i class="fa-solid fa-trash custom-icon"></i>
                                        </button>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>

                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-end">
                            @if (Model.Emails.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="SentEmail" asp-route-pageIndex="@(Model.Emails.PageIndex - 1)" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <a class="page-link" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }
                            @for (var i = 1; i <= Model.Emails.TotalPages; i++)
                            {
                                if (i == Model.Emails.PageIndex)
                                {
                                    <li class="page-item active">
                                        <a class="page-link">@i</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="SentEmail" asp-route-pageIndex="@i">@i</a>
                                    </li>
                                }
                            }
                            @if (Model.Emails.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="SentEmail" asp-route-pageIndex="@(Model.Emails.PageIndex + 1)" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <a class="page-link" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </main>
</div>

<!-- Modal Thêm Mail -->    
<div class="modal fade" id="addMailModal" tabindex="-1" aria-labelledby="addMailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMailModalLabel">Thêm Email</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMailForm" method="post" action="@Url.Action("SentEmail", "Categories")" enctype="multipart/form-data">
                    @foreach (var emails in Model.Emails)
                    {
                    <input type="hidden" id="threadId" name="threadId" value="@emails.ThreadId" />
                    }

                    <input type="hidden" id="threadId" name="threadId"  />

                    <div class="mb-3">
                        <label for="recipientTo" class="form-label">Người Nhận</label>

                        <!-- Recipient To -->
                        <div class="input-group mb-2" style="width: 100%; position: relative;">
                            <span class="input-group-text" style="width: 50px; display: inline-block;">To:</span>
                            <div class="input-chip-container" style="position: relative; display: flex; flex-wrap: nowrap; align-items: center; border: 1px solid #ccc; border-radius: 4px; padding: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap; max-width: calc(100% - 60px);">
                                <div id="recipientToChipList" class="chip-list" style="display: flex; gap: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap;"></div>
                                <input type="email" id="recipientTo" class="form-control" style="flex-shrink: 0; max-width: 30%; border: none; outline: none; padding: 5px; font-size: 14px;" placeholder="Nhập tên người nhận" />
                            </div>
                            <!-- Dropdown suggestions for Recipient To -->  
                            <div id="recipientToSuggestions" class="suggestion-list" style="display: none; position: absolute; top: 100%; left: 0; background-color: white; border: 1px solid #ccc; width: 100%; z-index: 999; max-height: 150px; overflow-y: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);"></div>
                        </div>

                        <!-- Recipient Cc -->
                        <div class="input-group mb-2" style="width: 100%; position: relative;">
                            <span class="input-group-text" style="width: 50px; display: inline-block;">Cc:</span>
                            <div class="input-chip-container" style="position: relative; display: flex; flex-wrap: nowrap; align-items: center; border: 1px solid #ccc; border-radius: 4px; padding: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap; max-width: calc(100% - 60px);">
                                <div id="recipientCcChipList" class="chip-list" style="display: flex; gap: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap;"></div>
                                <input type="email" id="recipientCc" class="form-control" style="flex-shrink: 0; max-width: 30%; border: none; outline: none; padding: 5px; font-size: 14px;" placeholder="Nhập tên người nhận" />
                            </div>
                            <!-- Dropdown suggestions for Recipient Cc -->
                            <div id="recipientCcSuggestions" class="suggestion-list" style="display: none; position: absolute; top: 100%; left: 0; background-color: white; border: 1px solid #ccc; width: 100%; z-index: 999; max-height: 150px; overflow-y: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);"></div>
                        </div>

                        <!-- Recipient Bcc -->
                        <div class="input-group mb-2" style="width: 100%; position: relative;">
                            <span class="input-group-text" style="width: 50px; display: inline-block;">Bcc:</span>
                            <div class="input-chip-container" style="position: relative; display: flex; flex-wrap: nowrap; align-items: center; border: 1px solid #ccc; border-radius: 4px; padding: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap; max-width: calc(100% - 60px);">
                                <div id="recipientBccChipList" class="chip-list" style="display: flex; gap: 5px; flex-grow: 1; overflow-x: auto; white-space: nowrap;"></div>
                                <input type="email" id="recipientBcc" class="form-control" style="flex-shrink: 0; max-width: 30%; border: none; outline: none; padding: 5px; font-size: 14px;" placeholder="Nhập tên người nhận" />
                            </div>
                            <!-- Dropdown suggestions for Recipient Bcc -->
                            <div id="recipientBccSuggestions" class="suggestion-list" style="display: none; position: absolute; top: 100%; left: 0; background-color: white; border: 1px solid #ccc; width: 100%; z-index: 999; max-height: 150px; overflow-y: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);"></div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="emailSubject" class="form-label">Tiêu Đề</label>
                        <input type="text" class="form-control" id="emailSubject" name="emailSubject" required>
                    </div>
                    <div class="mb-3">
                        <label for="emailContent" class="form-label">Nội Dung</label>
                        <textarea class="form-control" id="emailContent" name="emailContent" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="emailAttachment" class="form-label">Tệp Đính Kèm</label>
                        <input type="file" class="form-control" id="emailAttachment" name="emailAttachment" multiple>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary" id="sendEmailButton">Gửi Mail</button>
                    </div>
                </form>

            </div>
            
        </div>
    </div>
</div>

<!-- Modal Xóa Mail -->
<div class="modal fade" id="DeleteMailModal" tabindex="-1" aria-labelledby="DeleteMailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="DeleteMailModalLabel">Xóa Email</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa email này không?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <form id="deleteEmailForm" asp-action="DeleteEmail" method="post">
                    <!-- Lấy emailId từ button vào đây -->
                    <input type="hidden" id="emailId" name="emailId" />
                    <button type="submit" class="btn btn-danger">Xóa</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal Xem Chi Tiết Email -->
<div class="modal fade" id="viewEmailModal" tabindex="-1" aria-labelledby="viewEmailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewEmailModalLabel">Chi tiết Email</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Người gửi:</strong> <span id="viewEmailSender"></span></p>
                <p><strong>Người nhận:</strong> <span id="viewEmailRecipients"></span></p>
                <p><strong>Tiêu đề:</strong> <span id="viewEmailSubject"></span></p>
                <p><strong>Nội dung:</strong></p>
                <div id="viewEmailContent" style="border: 1px solid #ddd; padding: 10px;"></div>
                <p><strong>Ngày gửi:</strong> <span id="viewEmailSentDate"></span></p>
                <p><strong>File đính kèm:</strong></p>
                <ul id="viewEmailAttachments"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<script>
// Hàm mở modal Xóa và gán emailId vào form
    function openDeleteModal(button) {
        // Lấy emailId từ button
        var emailId = button.getAttribute('data-email-id');

        // Điền emailId vào form
        document.getElementById('emailId').value = emailId;

        // Mở modal
        $('#DeleteMailModal').modal('show');

    }

// Edit Modal JS
    // Function to handle input for all fields (To, Cc, Bcc)
function handleInputChange(inputSelector, suggestionListSelector, chipListSelector) {
    $(inputSelector).on('input', function() {
        const query = $(this).val();
        
        if (query.length < 2) {
            $(suggestionListSelector).hide(); // Hide if query is too short
            return;
        }

        $.ajax({
            url: '/Users/FindUser', // Ensure the URL is correct
            data: { query: query },
            success: function(data) {
                console.log('AJAX Response:', data); // Log the JSON response here
                renderSuggestions(suggestionListSelector, data, chipListSelector, inputSelector);
            },
            error: function(err) {
                console.error('Error fetching users', err);
            }
        });
    });
}

// Generic function to render suggestions
    function renderSuggestions(suggestionListId, data, chipListId, inputSelector) {
        const suggestionList = $(suggestionListId);
        suggestionList.empty(); // Clear previous suggestions

        const existingChips = getExistingChips(chipListId); // Get existing chip emails

        if (data && data.length > 0) {
            data.forEach(user => {
                // If fullName is null, use email as the fallback
                const displayName = user.fullName ? user.fullName : user.email;
                const displayRole = user.roleName ? ` - ${user.roleName}` : ''; // Hyphen between full name and role

                // Skip suggestions for emails already in the chip list
                if (existingChips.includes(user.email)) {
                    return; // Skip rendering this suggestion
                }

                // Create the suggestion item with inline styles
                const suggestionItem = $('<div>')
                    .addClass('suggestion-item')
                    .html(`
                        <div style="font-weight: bold;">${displayName}${displayRole}</div>
                        <div>${user.email}</div>
                    `)
                    .css({
                        'padding': '5px',
                        'cursor': 'pointer',
                        'font-size': '14px'
                    })
                    .hover(function() {
                        $(this).css('background-color', '#f0f0f0');
                    }, function() {
                        $(this).css('background-color', 'transparent');
                    })
                    .click(function() {
                        // Handle suggestion selection
                        addChip(user.email, chipListId); // Add the email as a chip
                        suggestionList.hide();  // Hide suggestions after selection
                        $(inputSelector).val(''); // Clear the input field after selection
                    });

                suggestionList.append(suggestionItem);
            });

            suggestionList.show(); // Show suggestions
        } else {
            suggestionList.hide(); // Hide if no results
        }
    }

    // Function to get existing emails from the chip list
    function getExistingChips(chipListId) {
        const chipList = $(chipListId);
        const existingChips = [];

        chipList.find('.chip').each(function() {
            const email = $(this).find('span').first().text(); // Get the email from the chip
            existingChips.push(email);
        });

        return existingChips;
    }

    // Function to add a chip for selected email
    function addChip(email, chipListId) {
        const chipList = $(chipListId);
        const chip = $('<div>')
            .addClass('chip')
            .html(`
                <span>${email}</span>
                <span class="remove-chip" style="cursor: pointer; padding-left: 5px;">&times;</span>
            `)
            .css({
                'display': 'inline-flex', // Use inline-flex to prevent wrapping
                'background-color': '#e0e0e0',
                'padding': '5px 10px',
                'border-radius': '20px',
                'margin': '2px',
                'font-size': '14px',
                'white-space': 'nowrap', // Prevent chip content from breaking to the next line
                'align-items': 'center' // Ensure content is aligned properly inside the chip
            });

        // Append the chip to the list
        chipList.append(chip);

        // Handle chip removal
        chip.find('.remove-chip').click(function() {
            $(this).parent().remove();
        });

        // Ensure the chip list doesn't wrap
        chipList.css({
            'display': 'flex',       // Prevent wrapping of chips
            'flex-wrap': 'nowrap',    // Prevent chips from breaking into new lines
            'overflow-x': 'auto'     // Allow horizontal scrolling if the chips exceed the container width
        });
    }

    // Initialize the input handling for To, Cc, and Bcc fields
    handleInputChange('#recipientTo', '#recipientToSuggestions', '#recipientToChipList');
    handleInputChange('#recipientCc', '#recipientCcSuggestions', '#recipientCcChipList');
    handleInputChange('#recipientBcc', '#recipientBccSuggestions', '#recipientBccChipList');

</script>
